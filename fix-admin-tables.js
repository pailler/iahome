const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase avec cl√© de service (contourne RLS)
const supabaseUrl = 'https://xemtoyzcihmncbrlsmhr.supabase.co';
// Utiliser la cl√© de service au lieu de la cl√© anonyme
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhlbXRveXpjaWhtbmNicmxzbWhyIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDQwNTMwNSwiZXhwIjoyMDY1OTgxMzA1fQ.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';

// Cr√©er un client avec la cl√© de service
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixAdminTables() {
  console.log('üîß Correction des tables d\'administration');
  console.log('==========================================');
  console.log('');

  try {
    // 1. R√©cup√©rer toutes les cartes
    console.log('1Ô∏è‚É£ R√©cup√©ration de toutes les cartes...');
    const { data: cards, error: cardsError } = await supabase
      .from('cartes')
      .select('*')
      .order('title');

    if (cardsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des cartes:', cardsError);
      return;
    }

    console.log(`‚úÖ ${cards.length} cartes trouv√©es`);
    console.log('');

    // 2. Ajouter des donn√©es de test pour toutes les cartes
    console.log('2Ô∏è‚É£ Ajout de donn√©es de test pour toutes les cartes...');
    
    for (let i = 0; i < cards.length; i++) {
      const card = cards[i];
      console.log(`   üìù Traitement de la carte ${i + 1}/${cards.length}: ${card.title}`);
      
      const updateData = {
        detail_title: `Page d√©taill√©e - ${card.title}`,
        detail_content: `# ${card.title}\n\n## Description\n${card.description}\n\n## Fonctionnalit√©s\n- Fonctionnalit√© principale\n- Fonctionnalit√© secondaire\n- Fonctionnalit√© avanc√©e\n\n## Utilisation\nCe module permet de ${card.description.toLowerCase()}.\n\n## Configuration\nPour configurer ce module, suivez ces √©tapes :\n\n1. **Installation**\n   - √âtape 1\n   - √âtape 2\n   - √âtape 3\n\n2. **Configuration**\n   - Param√®tre 1\n   - Param√®tre 2\n\n3. **Utilisation**\n   - Exemple d'utilisation\n   - Cas d'usage typique\n\n## Support\nPour toute question, contactez notre √©quipe de support.`,
        detail_meta_description: `D√©couvrez ${card.title} - ${card.description}. Module complet avec fonctionnalit√©s avanc√©es et support technique.`,
        detail_is_published: true
      };

      const { data: updateResult, error: updateError } = await supabase
        .from('cartes')
        .update(updateData)
        .eq('id', card.id)
        .select();

      if (updateError) {
        console.error(`   ‚ùå Erreur lors de la mise √† jour de ${card.title}:`, updateError);
        console.error(`   ‚ùå Code d'erreur:`, updateError.code);
        console.error(`   ‚ùå Message:`, updateError.message);
      } else {
        console.log(`   ‚úÖ ${card.title} mis √† jour avec succ√®s`);
      }
    }

    console.log('');

    // 3. V√©rifier les donn√©es mises √† jour
    console.log('3Ô∏è‚É£ V√©rification des donn√©es mises √† jour...');
    const { data: updatedCards, error: verifyError } = await supabase
      .from('cartes')
      .select('id, title, detail_title, detail_content, detail_meta_description, detail_is_published')
      .order('title')
      .limit(5);

    if (verifyError) {
      console.error('‚ùå Erreur lors de la v√©rification:', verifyError);
    } else {
      console.log('‚úÖ Donn√©es v√©rifi√©es:');
      updatedCards.forEach((card, index) => {
        console.log(`   ${index + 1}. ${card.title}`);
        console.log(`      - Detail Title: ${card.detail_title || 'NULL'}`);
        console.log(`      - Detail Content: ${card.detail_content ? card.detail_content.substring(0, 50) + '...' : 'NULL'}`);
        console.log(`      - Detail Meta: ${card.detail_meta_description || 'NULL'}`);
        console.log(`      - Published: ${card.detail_is_published}`);
        console.log('');
      });
    }

    console.log('üéâ Correction termin√©e !');
    console.log('üí° Maintenant, testez le formulaire d\'administration pour voir si les donn√©es remontent.');

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  }
}

// Ex√©cuter le script
fixAdminTables(); 