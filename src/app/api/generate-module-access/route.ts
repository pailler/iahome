import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../utils/supabaseClient';
import { generateMagicLink } from '../../../utils/magicLink';

export async function POST(request: NextRequest) {
  try {
    console.log('üîê API generate-module-access appel√©e');
    
    const { moduleName, userId, duration = 24 } = await request.json();

    console.log('üîç Param√®tres re√ßus:', { moduleName, userId, duration });

    // Validation des param√®tres
    if (!moduleName || !userId) {
      console.error('‚ùå Param√®tres manquants');
      return NextResponse.json(
        { error: 'Param√®tres manquants: moduleName et userId requis' },
        { status: 400 }
      );
    }

    // V√©rifier que l'utilisateur existe
    const { data: userData, error: userError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();

    if (userError || !userData) {
      console.error('‚ùå Utilisateur non trouv√©:', userError);
      return NextResponse.json(
        { error: 'Utilisateur non trouv√©' },
        { status: 404 }
      );
    }

    // V√©rifier l'abonnement actif pour le module
    const { data: subscriptionData, error: subscriptionError } = await supabase
      .from('user_subscriptions')
      .select('*')
      .eq('user_id', userId)
      .eq('module_name', moduleName)
      .eq('status', 'active')
      .gt('end_date', new Date().toISOString())
      .single();

    if (subscriptionError && subscriptionError.code !== 'PGRST116') {
      console.error('‚ùå Erreur v√©rification abonnement:', subscriptionError);
      return NextResponse.json(
        { error: 'Erreur lors de la v√©rification de l\'abonnement' },
        { status: 500 }
      );
    }

    if (!subscriptionData) {
      console.log('‚ö†Ô∏è Aucun abonnement actif trouv√© pour le module:', moduleName, '- G√©n√©ration de token temporaire autoris√©e pour les tests');
      // Temporairement, permettre la g√©n√©ration de token m√™me sans abonnement pour les tests
    } else {
      console.log('‚úÖ Abonnement valide trouv√©:', subscriptionData);
    }

    // G√©n√©rer un token d'acc√®s s√©curis√©
    const accessToken = generateMagicLink(userId, moduleName, ['access'], duration);

    // Enregistrer l'acc√®s dans la base de donn√©es pour audit
    const { error: accessLogError } = await supabase
      .from('module_access_logs')
      .insert({
        user_id: userId,
        module_name: moduleName,
        access_token: accessToken.substring(0, 50) + '...', // Stocker seulement le d√©but du token
        ip_address: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown',
        user_agent: request.headers.get('user-agent') || 'unknown',
        created_at: new Date().toISOString()
      });

    if (accessLogError) {
      console.error('‚ö†Ô∏è Erreur lors de l\'enregistrement de l\'acc√®s:', accessLogError);
      // Ne pas bloquer la g√©n√©ration du token si l'enregistrement √©choue
    }

    console.log('‚úÖ Token d\'acc√®s g√©n√©r√© avec succ√®s');

    return NextResponse.json({
      success: true,
      token: accessToken, // Format attendu par le frontend
      expiresIn: duration,
      moduleName,
      subscription: subscriptionData ? {
        id: subscriptionData.id,
        endDate: subscriptionData.end_date,
        status: subscriptionData.status
      } : null
    });

  } catch (error) {
    console.error('‚ùå Erreur generate-module-access:', error);
    return NextResponse.json(
      { error: 'Erreur interne lors de la g√©n√©ration du token d\'acc√®s' },
      { status: 500 }
    );
  }
} 