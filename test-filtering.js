const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Fonction utilitaire pour d√©terminer si un module est gratuit (copi√©e du code)
const isModuleFree = (module) => {
  const priceStr = module.price?.toString().toLowerCase() || '';
  return priceStr === '0' || priceStr === '0.00' || priceStr.includes('gratuit') || priceStr.includes('free');
};

const isModulePaid = (module) => {
  const priceStr = module.price?.toString().toLowerCase() || '';
  const isFree = isModuleFree(module);
  return !isFree && (priceStr.includes('‚Ç¨') || priceStr.includes('euros') || priceStr.includes('euro') || /\d+\.\d+/.test(priceStr) || /\d+,\d+/.test(priceStr));
};

async function testFiltering() {
  console.log('üß™ Test de la logique de filtrage...\n');
  
  try {
    // R√©cup√©ration de tous les modules
    const { data: modules, error } = await supabase
      .from('modules')
      .select('id, title, price');
    
    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration:', error);
      return;
    }
    
    console.log(`‚úÖ ${modules.length} modules r√©cup√©r√©s\n`);
    
    // Test de la logique de filtrage
    console.log('üìä Test de la logique de filtrage:');
    console.log('‚îÄ'.repeat(80));
    
    const freeModules = modules.filter(isModuleFree);
    const paidModules = modules.filter(isModulePaid);
    const unclassifiedModules = modules.filter(m => !isModuleFree(m) && !isModulePaid(m));
    
    console.log(`üÜì Modules gratuits (${freeModules.length}):`);
    freeModules.forEach(m => {
      console.log(`   ‚Ä¢ ${m.title}: "${m.price}"`);
    });
    console.log();
    
    console.log(`üí∞ Modules payants (${paidModules.length}):`);
    paidModules.forEach(m => {
      console.log(`   ‚Ä¢ ${m.title}: "${m.price}"`);
    });
    console.log();
    
    if (unclassifiedModules.length > 0) {
      console.log(`‚ùì Modules non class√©s (${unclassifiedModules.length}):`);
      unclassifiedModules.forEach(m => {
        console.log(`   ‚Ä¢ ${m.title}: "${m.price}"`);
      });
      console.log();
    }
    
    // Test de simulation du filtrage
    console.log('üéØ Simulation du filtrage "modules gratuits":');
    console.log('‚îÄ'.repeat(80));
    
    const priceFilter = 'free';
    const filteredModules = modules.filter(module => {
      const matchesPrice = priceFilter === 'all' || 
        (priceFilter === 'free' && isModuleFree(module)) ||
        (priceFilter === 'paid' && isModulePaid(module));
      
      return matchesPrice;
    });
    
    console.log(`‚úÖ Modules filtr√©s (filtre "gratuit"): ${filteredModules.length}`);
    filteredModules.forEach(m => {
      console.log(`   ‚Ä¢ ${m.title}: "${m.price}"`);
    });
    
    // V√©rification
    if (filteredModules.length === freeModules.length) {
      console.log('\n‚úÖ SUCC√àS: Le filtrage fonctionne correctement !');
    } else {
      console.log('\n‚ùå ERREUR: Le filtrage ne fonctionne pas correctement');
      console.log(`   Attendu: ${freeModules.length} modules gratuits`);
      console.log(`   Obtenu: ${filteredModules.length} modules filtr√©s`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  }
}

testFiltering(); 