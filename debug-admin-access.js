require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugAdminAccess() {
  console.log('üîç Diagnostic de l\'acc√®s admin');
  console.log('================================\n');
  
  try {
    // 1. V√©rifier la session actuelle
    console.log('üìã V√©rification de la session :');
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Erreur session:', sessionError);
      return;
    }
    
    if (!session) {
      console.log('‚ùå Aucune session active');
      return;
    }
    
    console.log('‚úÖ Session active pour:', session.user.email);
    console.log('   User ID:', session.user.id);
    
    // 2. V√©rifier le profil utilisateur
    console.log('\nüë§ V√©rification du profil :');
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('id, email, role, created_at')
      .eq('id', session.user.id)
      .single();
    
    if (profileError) {
      console.error('‚ùå Erreur profil:', profileError);
      console.log('   Code:', profileError.code);
      console.log('   Message:', profileError.message);
      return;
    }
    
    if (!profile) {
      console.log('‚ùå Aucun profil trouv√©');
      return;
    }
    
    console.log('‚úÖ Profil trouv√©:');
    console.log('   Email:', profile.email);
    console.log('   R√¥le:', profile.role);
    console.log('   Cr√©√© le:', profile.created_at);
    
    // 3. V√©rifier si l'utilisateur est admin
    console.log('\nüîê V√©rification des droits admin :');
    if (profile.role === 'admin') {
      console.log('‚úÖ Utilisateur est admin');
    } else {
      console.log('‚ùå Utilisateur n\'est pas admin (r√¥le:', profile.role, ')');
    }
    
    // 4. Tester l'acc√®s √† la table blog_articles
    console.log('\nüìù Test d\'acc√®s √† blog_articles :');
    const { data: articles, error: articlesError } = await supabase
      .from('blog_articles')
      .select('id, title')
      .limit(1);
    
    if (articlesError) {
      console.error('‚ùå Erreur acc√®s blog_articles:', articlesError);
    } else {
      console.log('‚úÖ Acc√®s √† blog_articles OK');
      console.log('   Articles trouv√©s:', articles.length);
    }
    
    // 5. Suggestions de r√©solution
    console.log('\nüîß Suggestions de r√©solution :');
    if (profile.role !== 'admin') {
      console.log('1. Mettre √† jour le r√¥le vers "admin" :');
      console.log('   UPDATE profiles SET role = \'admin\' WHERE id = \'' + session.user.id + '\';');
    }
    
    console.log('2. V√©rifier les politiques RLS sur profiles');
    console.log('3. V√©rifier les politiques RLS sur blog_articles');
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

debugAdminAccess(); 