const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// D√©finition des sous-titres pour chaque module
const subtitles = {
  'Stable diffusion': 'G√©n√©rez des images avec l\'intelligence artificielle',
  'PDF Pro+': 'Cr√©ez et modifiez des documents PDF professionnels',
  'Banni√®re HA': 'Cr√©ez des banni√®res publicitaires avec l\'IA',
  'AI Assistant': 'Assistant IA pour vos t√¢ches quotidiennes',
  'Cogstudio': 'Studio de cr√©ation avec IA avanc√©e',
  'Invoke': 'G√©n√©rez des images avec Invoke AI',
  'Librespeed': 'Testez la vitesse de votre connexion internet',
  'PDF+': 'Traitement et conversion de documents PDF',
  'PSitransfer': 'Transfert de fichiers s√©curis√© et rapide',
  'QR codes dynamiques': 'G√©n√©rez des QR codes dynamiques personnalis√©s',
  'ruinedfooocus': 'Interface Fooocus pour Stable Diffusion',
  'SDnext': 'Interface SDNext pour la g√©n√©ration d\'images',
  'Video Editor': '√âditeur vid√©o en ligne avec IA'
};

async function updateModulesSubtitles() {
  console.log('üîß Mise √† jour des sous-titres des modules...\n');
  
  try {
    // R√©cup√©ration de tous les modules
    console.log('1. R√©cup√©ration des modules...');
    const { data: modules, error } = await supabase
      .from('modules')
      .select('id, title, subtitle');
    
    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration:', error);
      return;
    }
    
    console.log(`‚úÖ ${modules.length} modules r√©cup√©r√©s\n`);
    
    // Mise √† jour des sous-titres
    console.log('2. Mise √† jour des sous-titres...');
    let updatedCount = 0;
    
    for (const module of modules) {
      const newSubtitle = subtitles[module.title];
      
      if (newSubtitle && (!module.subtitle || module.subtitle.trim() === '')) {
        console.log(`   üìù Mise √† jour: ${module.title}`);
        console.log(`      Ancien: "${module.subtitle || 'Aucun'}"`);
        console.log(`      Nouveau: "${newSubtitle}"`);
        
        const { error: updateError } = await supabase
          .from('modules')
          .update({ subtitle: newSubtitle })
          .eq('id', module.id);
        
        if (updateError) {
          console.error(`   ‚ùå Erreur pour ${module.title}:`, updateError);
        } else {
          console.log(`   ‚úÖ Succ√®s pour ${module.title}`);
          updatedCount++;
        }
        console.log();
      } else if (newSubtitle) {
        console.log(`   ‚è≠Ô∏è  ${module.title}: D√©j√† un sous-titre pr√©sent`);
      } else {
        console.log(`   ‚ö†Ô∏è  ${module.title}: Pas de sous-titre d√©fini`);
      }
    }
    
    console.log(`\nüìä R√©sum√©: ${updatedCount} modules mis √† jour`);
    
    // V√©rification finale
    console.log('\n3. V√©rification finale...');
    const { data: finalModules, error: finalError } = await supabase
      .from('modules')
      .select('title, subtitle')
      .order('title');
    
    if (finalError) {
      console.error('‚ùå Erreur lors de la v√©rification:', finalError);
      return;
    }
    
    console.log('\nüìã √âtat final des modules:');
    console.log('‚îÄ'.repeat(80));
    
    const modulesWithSubtitles = finalModules.filter(m => m.subtitle);
    const modulesWithoutSubtitles = finalModules.filter(m => !m.subtitle);
    
    console.log(`üìä Modules avec sous-titres: ${modulesWithSubtitles.length}/${finalModules.length}`);
    console.log(`üìä Modules sans sous-titres: ${modulesWithoutSubtitles.length}/${finalModules.length}\n`);
    
    if (modulesWithSubtitles.length > 0) {
      console.log('üìù Modules avec sous-titres:');
      modulesWithSubtitles.forEach(m => {
        console.log(`   ‚Ä¢ ${m.title}: "${m.subtitle}"`);
      });
    }
    
    if (modulesWithoutSubtitles.length > 0) {
      console.log('\n‚ùå Modules sans sous-titres:');
      modulesWithoutSubtitles.forEach(m => {
        console.log(`   ‚Ä¢ ${m.title}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  }
}

updateModulesSubtitles(); 