const { createClient } = require('@supabase/supabase-js');
const crypto = require('crypto');

// Configuration Supabase avec la vraie URL et la vraie cl√© anonyme
const supabaseUrl = 'https://xemtoyzcihmncbrlsmhr.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhlbXRveXpjaWhtbmNicmxzbWhyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0MDUzMDUsImV4cCI6MjA2NTk4MTMwNX0.afcRGhlB5Jj-7kgCV6IzUDRdGUQkHkm1Fdl1kzDdj6M';

console.log('üîç Cr√©ation d\'un magic link de test...\n');

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Fonction pour g√©n√©rer un UUID v4
function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

async function listUserIds() {
  // Essaye d'abord la table 'users', sinon 'profiles'
  let { data, error } = await supabase.from('users').select('id').limit(10);
  if (error || !data || data.length === 0) {
    ({ data, error } = await supabase.from('profiles').select('id').limit(10));
    if (error || !data || data.length === 0) {
      console.log('‚ùå Impossible de r√©cup√©rer des user_id dans users ou profiles.');
      return [];
    } else {
      console.log('\nüë§ Utilisateurs trouv√©s dans la table profiles :');
    }
  } else {
    console.log('\nüë§ Utilisateurs trouv√©s dans la table users :');
  }
  data.forEach((u, i) => console.log(`  [${i+1}] ${u.id}`));
  return data.map(u => u.id);
}

async function createSimpleMagicLink(userId) {
  try {
    // Donn√©es de test avec un user_id r√©el
    const testData = {
      userId: userId,
      subscriptionId: 'test-sub-456',
      moduleName: 'test-module',
      userEmail: 'test@example.com',
      redirectUrl: 'https://test.example.com/access'
    };

    // G√©n√©rer un token s√©curis√©
    const token = crypto.randomBytes(32).toString('hex');
    
    // D√©finir l'expiration (24 heures)
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + 24);

    console.log('üîç Token g√©n√©r√©:', token);
    console.log('üîç Expiration:', expiresAt.toISOString());
    console.log('üîç Donn√©es de test:', testData);

    // Ins√©rer le magic link dans Supabase
    console.log('\nüìù Insertion dans la table magic_links...');
    const { data, error } = await supabase
      .from('magic_links')
      .insert({
        token,
        user_id: testData.userId,
        subscription_id: testData.subscriptionId,
        module_name: testData.moduleName,
        user_email: testData.userEmail,
        redirect_url: testData.redirectUrl,
        expires_at: expiresAt.toISOString(),
        is_used: false
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erreur insertion magic link:', error);
      console.log('\nüí° V√©rifiez que:');
      console.log('   - Votre base de donn√©es Supabase est accessible');
      console.log('   - La table "magic_links" existe');
      console.log('   - Vous avez les permissions d\'insertion');
      console.log('   - Votre cl√© anonyme Supabase est correcte');
      return;
    }

    console.log('‚úÖ Magic link cr√©√© avec succ√®s !');
    console.log('üìã D√©tails du magic link:');
    console.log('   - ID:', data.id);
    console.log('   - Token:', token);
    console.log('   - User ID:', data.user_id);
    console.log('   - Module:', data.module_name);
    console.log('   - Email:', data.user_email);
    console.log('   - Expiration:', data.expires_at);
    console.log('   - Utilis√©:', data.is_used);

    // Construire l'URL du magic link
    const baseUrl = 'https://home.regispailler.fr';
    const magicLinkUrl = `${baseUrl}/access/${testData.moduleName}?token=${token}&user=${testData.userId}`;
    
    console.log('\nüîó URL du magic link:', magicLinkUrl);

    // V√©rifier que le magic link a bien √©t√© cr√©√©
    console.log('\nüîç V√©rification de la cr√©ation...');
    const { data: verifyData, error: verifyError } = await supabase
      .from('magic_links')
      .select('*')
      .eq('token', token)
      .single();

    if (verifyError) {
      console.error('‚ùå Erreur lors de la v√©rification:', verifyError);
    } else {
      console.log('‚úÖ Magic link v√©rifi√© dans la base de donn√©es');
      console.log('   - Trouv√© dans la table:', !!verifyData);
      console.log('   - Token correspond:', verifyData.token === token);
    }

    // Afficher les informations pour tester
    console.log('\nüß™ Pour tester ce magic link:');
    console.log('1. Copiez l\'URL ci-dessus');
    console.log('2. Ouvrez-la dans un navigateur');
    console.log('3. V√©rifiez que l\'acc√®s fonctionne');
    console.log('4. Le magic link sera marqu√© comme "utilis√©" apr√®s validation');

    // Afficher la requ√™te SQL pour v√©rifier manuellement
    console.log('\nüìä Requ√™te SQL pour v√©rifier manuellement:');
    console.log(`SELECT * FROM magic_links WHERE token = '${token}';`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du magic link:', error);
  }
}

// Script principal
(async () => {
  const userIds = await listUserIds();
  if (userIds.length === 0) {
    console.log('Aucun user_id trouv√©. Veuillez cr√©er un utilisateur d\'abord.');
    return;
  }
  console.log('\nCr√©ation du magic link avec le user_id :', userIds[0]);
  await createSimpleMagicLink(userIds[0]);
})();