// Script de diagnostic pour les webhooks Stripe
// Usage: node diagnostic-webhook-stripe.js

require('dotenv').config({ path: '.env.local' });

console.log('üîç Diagnostic des webhooks Stripe');
console.log('==================================');

// V√©rifier les variables d'environnement
console.log('\nüìã Variables d\'environnement :');
console.log('STRIPE_SECRET_KEY:', process.env.STRIPE_SECRET_KEY ? '‚úÖ Configur√©' : '‚ùå Manquant');
console.log('STRIPE_WEBHOOK_SECRET:', process.env.STRIPE_WEBHOOK_SECRET ? '‚úÖ Configur√©' : '‚ùå Manquant');
console.log('EMAIL_PROVIDER:', process.env.EMAIL_PROVIDER || 'console (par d√©faut)');
console.log('RESEND_API_KEY:', process.env.RESEND_API_KEY ? '‚úÖ Configur√©' : '‚ùå Manquant');
console.log('RESEND_FROM_EMAIL:', process.env.RESEND_FROM_EMAIL || '‚ùå Non configur√©');

// Test de connexion Stripe
async function testStripeConnection() {
  console.log('\nüí≥ Test de connexion Stripe :');
  
  if (!process.env.STRIPE_SECRET_KEY) {
    console.log('‚ùå STRIPE_SECRET_KEY manquant');
    return false;
  }
  
  try {
    const Stripe = require('stripe');
    const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
      apiVersion: '2025-06-30.basil',
    });
    
    console.log('‚úÖ Stripe initialis√©');
    
    // R√©cup√©rer les webhooks configur√©s
    const webhooks = await stripe.webhookEndpoints.list();
    
    console.log('üìã Webhooks configur√©s :');
    if (webhooks.data.length === 0) {
      console.log('‚ùå Aucun webhook configur√©');
      return false;
    }
    
    webhooks.data.forEach((webhook, index) => {
      console.log(`\n${index + 1}. Webhook ID: ${webhook.id}`);
      console.log(`   URL: ${webhook.url}`);
      console.log(`   Statut: ${webhook.status}`);
      console.log(`   √âv√©nements: ${webhook.enabled_events.join(', ')}`);
      
      // V√©rifier si l'URL correspond √† votre application
      if (webhook.url.includes('home.regispailler.fr')) {
        console.log('   ‚úÖ URL correspond √† votre application');
      } else {
        console.log('   ‚ö†Ô∏è  URL ne correspond pas √† votre application');
      }
    });
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test Stripe:', error.message);
    return false;
  }
}

// Test de simulation de webhook
async function testWebhookSimulation() {
  console.log('\nüîÑ Test de simulation webhook :');
  
  try {
    // Simuler un √©v√©nement de paiement r√©ussi
    const mockEvent = {
      type: 'checkout.session.completed',
      data: {
        object: {
          id: 'cs_test_simulation',
          customer_email: 'formateur_tic@hotmail.com',
          amount_total: 2000,
          metadata: {
            items: JSON.stringify([
              { title: 'Module IA Test', price: 2000 }
            ])
          }
        }
      }
    };
    
    console.log('üìã √âv√©nement simul√©:', mockEvent.type);
    console.log('üìß Email client:', mockEvent.data.object.customer_email);
    console.log('üí∞ Montant:', (mockEvent.data.object.amount_total / 100) + '‚Ç¨');
    
    // Test du service email
    const { emailService } = require('./src/utils/emailService');
    
    const items = JSON.parse(mockEvent.data.object.metadata.items);
    const success = await emailService.sendPaymentConfirmation(
      mockEvent.data.object.customer_email,
      mockEvent.data.object.amount_total,
      items,
      mockEvent.data.object.id
    );
    
    if (success) {
      console.log('‚úÖ Email de confirmation envoy√© avec succ√®s !');
      return true;
    } else {
      console.log('‚ùå √âchec de l\'envoi de l\'email de confirmation');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test webhook:', error.message);
    return false;
  }
}

// Test de l'endpoint webhook
async function testWebhookEndpoint() {
  console.log('\nüåê Test de l\'endpoint webhook :');
  
  try {
    const https = require('https');
    const url = 'https://home.regispailler.fr/api/webhooks/stripe';
    
    console.log('üì° Test de connectivit√© vers:', url);
    
    // Test simple de connectivit√©
    const testRequest = () => {
      return new Promise((resolve, reject) => {
        const req = https.request(url, { method: 'GET' }, (res) => {
          console.log('üìä Statut HTTP:', res.statusCode);
          console.log('üìã Headers:', res.headers);
          resolve(res.statusCode);
        });
        
        req.on('error', (error) => {
          console.log('‚ùå Erreur de connexion:', error.message);
          reject(error);
        });
        
        req.setTimeout(5000, () => {
          console.log('‚è∞ Timeout de la requ√™te');
          req.destroy();
          reject(new Error('Timeout'));
        });
        
        req.end();
      });
    };
    
    const statusCode = await testRequest();
    
    if (statusCode === 405) {
      console.log('‚úÖ Endpoint accessible (405 = Method Not Allowed, normal pour GET)');
      return true;
    } else if (statusCode === 200) {
      console.log('‚úÖ Endpoint accessible');
      return true;
    } else {
      console.log('‚ö†Ô∏è  Endpoint accessible mais statut inattendu:', statusCode);
      return true;
    }
    
  } catch (error) {
    console.error('‚ùå Endpoint inaccessible:', error.message);
    return false;
  }
}

// V√©rifier les logs r√©cents
function checkRecentLogs() {
  console.log('\nüìù V√©rification des logs :');
  
  console.log('üîç V√©rifiez les logs de votre serveur pour voir :');
  console.log('   - "Webhook re√ßu: checkout.session.completed"');
  console.log('   - "üìß Email envoy√© via Resend: formateur_tic@hotmail.com"');
  console.log('   - "‚úÖ Paiement confirm√© pour la session: [ID]"');
  
  console.log('\nüîç V√©rifiez le dashboard Stripe :');
  console.log('   - Allez dans "Developers" > "Webhooks"');
  console.log('   - Cliquez sur votre webhook');
  console.log('   - V√©rifiez les tentatives r√©centes');
  console.log('   - Regardez les codes de statut HTTP');
}

// Fonction principale
async function runDiagnostic() {
  console.log('\nüöÄ D√©marrage du diagnostic...');
  
  const test1 = await testStripeConnection();
  const test2 = await testWebhookSimulation();
  const test3 = await testWebhookEndpoint();
  
  console.log('\nüìä R√©sum√© du diagnostic :');
  console.log('==========================');
  
  if (test1) {
    console.log('‚úÖ Connexion Stripe : OK');
  } else {
    console.log('‚ùå Connexion Stripe : √âCHEC');
  }
  
  if (test2) {
    console.log('‚úÖ Simulation webhook : OK');
  } else {
    console.log('‚ùå Simulation webhook : √âCHEC');
  }
  
  if (test3) {
    console.log('‚úÖ Endpoint webhook : OK');
  } else {
    console.log('‚ùå Endpoint webhook : √âCHEC');
  }
  
  checkRecentLogs();
  
  console.log('\nüéØ Prochaines √©tapes :');
  if (test1 && test2 && test3) {
    console.log('‚úÖ Configuration correcte d√©tect√©e');
    console.log('üîç Le probl√®me peut venir de :');
    console.log('   1. Le webhook Stripe n\'est pas configur√© correctement');
    console.log('   2. L\'URL du webhook ne correspond pas');
    console.log('   3. Le serveur n\'√©tait pas d√©marr√© lors du paiement');
    console.log('   4. Les logs montrent des erreurs sp√©cifiques');
  } else {
    console.log('‚ùå Probl√®mes de configuration d√©tect√©s');
    console.log('üîß Corrigez les probl√®mes ci-dessus');
  }
  
  console.log('\nüìû Actions recommand√©es :');
  console.log('1. V√©rifiez les logs de votre serveur');
  console.log('2. V√©rifiez le dashboard Stripe > Webhooks');
  console.log('3. Refaites un test de paiement');
  console.log('4. V√©rifiez que le serveur est bien d√©marr√©');
}

// Ex√©cuter le diagnostic
runDiagnostic().catch(console.error); 