// Script de test pour v√©rifier la configuration email
// Usage: node test-email-configuration.js

require('dotenv').config({ path: '.env.local' });

console.log('üîß Test de configuration email');
console.log('==============================');

// V√©rifier les variables d'environnement
console.log('\nüìã Variables d\'environnement :');
console.log('EMAIL_PROVIDER:', process.env.EMAIL_PROVIDER || 'console (par d√©faut)');
console.log('RESEND_API_KEY:', process.env.RESEND_API_KEY ? '‚úÖ Configur√©' : '‚ùå Manquant');
console.log('SENDGRID_API_KEY:', process.env.SENDGRID_API_KEY ? '‚úÖ Configur√©' : '‚ùå Manquant');
console.log('RESEND_FROM_EMAIL:', process.env.RESEND_FROM_EMAIL || '‚ùå Non configur√©');
console.log('SENDGRID_FROM_EMAIL:', process.env.SENDGRID_FROM_EMAIL || '‚ùå Non configur√©');

// V√©rifier la configuration Stripe
console.log('\nüí≥ Configuration Stripe :');
console.log('STRIPE_SECRET_KEY:', process.env.STRIPE_SECRET_KEY ? '‚úÖ Configur√©' : '‚ùå Manquant');
console.log('STRIPE_WEBHOOK_SECRET:', process.env.STRIPE_WEBHOOK_SECRET ? '‚úÖ Configur√©' : '‚ùå Manquant');

// Test du service email
async function testEmailService() {
  console.log('\nüìß Test du service email :');
  
  try {
    // Importer le service email
    const { emailService } = require('./src/utils/emailService');
    
    console.log('‚úÖ Service email import√© avec succ√®s');
    
    // Test d'envoi d'email
    const testEmail = {
      to: 'test@example.com',
      subject: 'üß™ Test de configuration - IA Home',
      html: `
        <h2>Test de configuration email</h2>
        <p>Cet email a √©t√© envoy√© pour tester la configuration du service email.</p>
        <p><strong>Date:</strong> ${new Date().toLocaleString('fr-FR')}</p>
        <p><strong>Provider:</strong> ${process.env.EMAIL_PROVIDER || 'console'}</p>
        <hr>
        <p style="color: #666; font-size: 12px;">
          Si vous recevez cet email, la configuration est correcte !
        </p>
      `
    };
    
    console.log('üì§ Tentative d\'envoi d\'email de test...');
    const result = await emailService.sendEmail(testEmail);
    
    if (result) {
      console.log('‚úÖ Email envoy√© avec succ√®s !');
    } else {
      console.log('‚ùå √âchec de l\'envoi d\'email');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test du service email:', error.message);
  }
}

// Test de simulation de webhook Stripe
async function testStripeWebhook() {
  console.log('\nüîÑ Test de simulation webhook Stripe :');
  
  try {
    // Simuler un √©v√©nement de paiement r√©ussi
    const mockPaymentEvent = {
      type: 'checkout.session.completed',
      data: {
        object: {
          id: 'cs_test_123456789',
          customer_email: 'test@example.com',
          amount_total: 2000, // 20‚Ç¨ en centimes
          metadata: {
            items: JSON.stringify([
              { title: 'Module IA Test', price: 2000 }
            ])
          }
        }
      }
    };
    
    console.log('üìã √âv√©nement simul√©:', mockPaymentEvent.type);
    console.log('üìß Email client:', mockPaymentEvent.data.object.customer_email);
    console.log('üí∞ Montant:', (mockPaymentEvent.data.object.amount_total / 100) + '‚Ç¨');
    
    // Importer le service email pour tester l'envoi de confirmation
    const { emailService } = require('./src/utils/emailService');
    
    const items = JSON.parse(mockPaymentEvent.data.object.metadata.items);
    const success = await emailService.sendPaymentConfirmation(
      mockPaymentEvent.data.object.customer_email,
      mockPaymentEvent.data.object.amount_total,
      items,
      mockPaymentEvent.data.object.id
    );
    
    if (success) {
      console.log('‚úÖ Email de confirmation de paiement envoy√© !');
    } else {
      console.log('‚ùå √âchec de l\'envoi de l\'email de confirmation');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test webhook:', error.message);
  }
}

// Fonction principale
async function runTests() {
  await testEmailService();
  await testStripeWebhook();
  
  console.log('\nüìä R√©sum√© des tests :');
  console.log('=====================');
  
  if (process.env.EMAIL_PROVIDER === 'resend' && process.env.RESEND_API_KEY) {
    console.log('‚úÖ Resend configur√© correctement');
  } else if (process.env.EMAIL_PROVIDER === 'sendgrid' && process.env.SENDGRID_API_KEY) {
    console.log('‚úÖ SendGrid configur√© correctement');
  } else {
    console.log('‚ö†Ô∏è  Aucun service email configur√© - emails affich√©s dans la console uniquement');
  }
  
  if (process.env.STRIPE_WEBHOOK_SECRET) {
    console.log('‚úÖ Webhook Stripe configur√©');
  } else {
    console.log('‚ö†Ô∏è  Webhook Stripe non configur√©');
  }
  
  console.log('\nüìù Prochaines √©tapes :');
  console.log('1. Configurez un service email (Resend ou SendGrid)');
  console.log('2. Ajoutez STRIPE_WEBHOOK_SECRET dans vos variables d\'environnement');
  console.log('3. Red√©marrez votre application');
  console.log('4. Testez un vrai paiement avec une carte de test Stripe');
}

// Ex√©cuter les tests
runTests().catch(console.error); 