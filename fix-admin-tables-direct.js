const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

// Configuration Supabase
const supabaseUrl = 'https://xemtoyzcihmncbrlsmhr.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhlbXRveXpjaWhtbmNicmxzbWhyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0MDUzMDUsImV4cCI6MjA2NTk4MTMwNX0.afcRGhlB5Jj-7kgCV6IzUDRdGUQkHkm1Fdl1kzDdj6M';

async function fixAdminTablesDirect() {
  console.log('üîß Correction des tables d\'administration (API REST directe)');
  console.log('============================================================');
  console.log('');

  try {
    // 1. R√©cup√©rer toutes les cartes via API REST
    console.log('1Ô∏è‚É£ R√©cup√©ration de toutes les cartes via API REST...');
    const cardsResponse = await fetch(`${supabaseUrl}/rest/v1/cartes?select=*&order=title.asc`, {
      method: 'GET',
      headers: {
        'apikey': supabaseAnonKey,
        'Authorization': `Bearer ${supabaseAnonKey}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      }
    });

    if (!cardsResponse.ok) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des cartes:', cardsResponse.status, cardsResponse.statusText);
      const errorText = await cardsResponse.text();
      console.error('‚ùå D√©tails:', errorText);
      return;
    }

    const cards = await cardsResponse.json();
    console.log(`‚úÖ ${cards.length} cartes trouv√©es via API REST`);
    console.log('');

    // 2. Ajouter des donn√©es de test pour toutes les cartes
    console.log('2Ô∏è‚É£ Ajout de donn√©es de test pour toutes les cartes...');
    
    for (let i = 0; i < cards.length; i++) {
      const card = cards[i];
      console.log(`   üìù Traitement de la carte ${i + 1}/${cards.length}: ${card.title}`);
      
      const updateData = {
        detail_title: `Page d√©taill√©e - ${card.title}`,
        detail_content: `# ${card.title}\n\n## Description\n${card.description}\n\n## Fonctionnalit√©s\n- Fonctionnalit√© principale\n- Fonctionnalit√© secondaire\n- Fonctionnalit√© avanc√©e\n\n## Utilisation\nCe module permet de ${card.description.toLowerCase()}.\n\n## Configuration\nPour configurer ce module, suivez ces √©tapes :\n\n1. **Installation**\n   - √âtape 1\n   - √âtape 2\n   - √âtape 3\n\n2. **Configuration**\n   - Param√®tre 1\n   - Param√®tre 2\n\n3. **Utilisation**\n   - Exemple d'utilisation\n   - Cas d'usage typique\n\n## Support\nPour toute question, contactez notre √©quipe de support.`,
        detail_meta_description: `D√©couvrez ${card.title} - ${card.description}. Module complet avec fonctionnalit√©s avanc√©es et support technique.`,
        detail_is_published: true
      };

      const updateResponse = await fetch(`${supabaseUrl}/rest/v1/cartes?id=eq.${card.id}`, {
        method: 'PATCH',
        headers: {
          'apikey': supabaseAnonKey,
          'Authorization': `Bearer ${supabaseAnonKey}`,
          'Content-Type': 'application/json',
          'Prefer': 'return=representation'
        },
        body: JSON.stringify(updateData)
      });

      if (!updateResponse.ok) {
        console.error(`   ‚ùå Erreur lors de la mise √† jour de ${card.title}:`, updateResponse.status, updateResponse.statusText);
        const errorText = await updateResponse.text();
        console.error(`   ‚ùå D√©tails:`, errorText);
      } else {
        const updateResult = await updateResponse.json();
        console.log(`   ‚úÖ ${card.title} mis √† jour avec succ√®s`);
        console.log(`   üìä R√©sultat:`, updateResult);
      }
    }

    console.log('');

    // 3. V√©rifier les donn√©es mises √† jour
    console.log('3Ô∏è‚É£ V√©rification des donn√©es mises √† jour...');
    const verifyResponse = await fetch(`${supabaseUrl}/rest/v1/cartes?select=id,title,detail_title,detail_content,detail_meta_description,detail_is_published&order=title.asc&limit=5`, {
      method: 'GET',
      headers: {
        'apikey': supabaseAnonKey,
        'Authorization': `Bearer ${supabaseAnonKey}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      }
    });

    if (!verifyResponse.ok) {
      console.error('‚ùå Erreur lors de la v√©rification:', verifyResponse.status, verifyResponse.statusText);
    } else {
      const updatedCards = await verifyResponse.json();
      console.log('‚úÖ Donn√©es v√©rifi√©es:');
      updatedCards.forEach((card, index) => {
        console.log(`   ${index + 1}. ${card.title}`);
        console.log(`      - Detail Title: ${card.detail_title || 'NULL'}`);
        console.log(`      - Detail Content: ${card.detail_content ? card.detail_content.substring(0, 50) + '...' : 'NULL'}`);
        console.log(`      - Detail Meta: ${card.detail_meta_description || 'NULL'}`);
        console.log(`      - Published: ${card.detail_is_published}`);
        console.log('');
      });
    }

    console.log('üéâ Correction termin√©e !');
    console.log('üí° Maintenant, testez le formulaire d\'administration pour voir si les donn√©es remontent.');

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  }
}

// Ex√©cuter le script
fixAdminTablesDirect(); 