const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function fixChatDatabase() {
  console.log('üîß D√©but de la correction de la base de donn√©es du chat...\n');

  try {
    // 1. V√©rifier si la table existe
    console.log('üìã V√©rification de l\'existence de la table...');
    const { data: tableExists, error: tableError } = await supabase
      .from('chat_conversations')
      .select('id')
      .limit(1);

    if (tableError && tableError.code === '42P01') {
      console.log('‚ùå Table chat_conversations n\'existe pas');
      console.log('üí° Ex√©cutez d\'abord le script create-chat-conversations-table.sql');
      return;
    }

    console.log('‚úÖ Table chat_conversations existe\n');

    // 2. Tester l'insertion d'une conversation de test
    console.log('üß™ Test d\'insertion d\'une conversation...');
    const testConversation = {
      user_id: '00000000-0000-0000-0000-000000000000', // UUID de test
      user_message: 'Test message',
      ai_response: 'Test response',
      created_at: new Date().toISOString()
    };

    const { data: insertData, error: insertError } = await supabase
      .from('chat_conversations')
      .insert(testConversation)
      .select();

    if (insertError) {
      console.log('‚ùå Erreur d\'insertion:', insertError.message);
      
      if (insertError.code === '42501') {
        console.log('üîí Probl√®me de permissions RLS d√©tect√©');
        console.log('üí° Solutions possibles:');
        console.log('   1. Ex√©cutez le script fix-chat-conversations-rls.sql');
        console.log('   2. Ou d√©sactivez temporairement RLS:');
        console.log('      ALTER TABLE chat_conversations DISABLE ROW LEVEL SECURITY;');
      }
    } else {
      console.log('‚úÖ Insertion r√©ussie');
      
      // Nettoyer la conversation de test
      await supabase
        .from('chat_conversations')
        .delete()
        .eq('user_id', '00000000-0000-0000-0000-000000000000');
      
      console.log('üßπ Conversation de test supprim√©e');
    }

    // 3. V√©rifier la structure de la table
    console.log('\nüìä Structure de la table:');
    const { data: columns, error: columnsError } = await supabase
      .rpc('get_table_columns', { table_name: 'chat_conversations' });

    if (columnsError) {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer la structure (normal si la fonction n\'existe pas)');
    } else {
      console.log(columns);
    }

    // 4. V√©rifier les politiques RLS
    console.log('\nüîê V√©rification des politiques RLS:');
    const { data: policies, error: policiesError } = await supabase
      .rpc('get_table_policies', { table_name: 'chat_conversations' });

    if (policiesError) {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les politiques (normal si la fonction n\'existe pas)');
    } else {
      console.log(policies);
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }

  console.log('\n‚ú® Diagnostic termin√©');
  console.log('\nüìù Prochaines √©tapes:');
  console.log('1. Connectez-vous √† votre dashboard Supabase');
  console.log('2. Allez dans l\'√©diteur SQL');
  console.log('3. Ex√©cutez le script fix-chat-conversations-rls.sql');
  console.log('4. Ou ex√©cutez cette commande simple:');
  console.log('   ALTER TABLE chat_conversations DISABLE ROW LEVEL SECURITY;');
}

// Ex√©cuter le script
fixChatDatabase().catch(console.error); 