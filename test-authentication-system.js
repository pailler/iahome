const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = 'https://xemtoyzcihmncbrlsmhr.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhlbXRveXpjaWhtbmNicmxzbWhyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0MDUzMDUsImV4cCI6MjA2NTk4MTMwNX0.afcRGhlB5Jj-7kgCV6IzUDRdGUQkHkm1Fdl1kzDdj6M';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testAuthenticationSystem() {
  console.log('üß™ Test du syst√®me d\'authentification\n');

  try {
    // 1. Test de connexion √† Supabase
    console.log('1Ô∏è‚É£ Test de connexion √† Supabase...');
    const { data, error } = await supabase.from('profiles').select('count').limit(1);
    if (error) {
      console.error('‚ùå Erreur de connexion √† Supabase:', error);
      return;
    }
    console.log('‚úÖ Connexion √† Supabase r√©ussie\n');

    // 2. V√©rifier la structure des tables
    console.log('2Ô∏è‚É£ V√©rification de la structure des tables...');
    
    // V√©rifier la table profiles
    const { data: profilesData, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(1);
    
    if (profilesError) {
      console.error('‚ùå Erreur table profiles:', profilesError);
    } else {
      console.log('‚úÖ Table profiles accessible');
    }

    // V√©rifier la table user_subscriptions
    const { data: subscriptionsData, error: subscriptionsError } = await supabase
      .from('user_subscriptions')
      .select('*')
      .limit(1);
    
    if (subscriptionsError) {
      console.error('‚ùå Erreur table user_subscriptions:', subscriptionsError);
    } else {
      console.log('‚úÖ Table user_subscriptions accessible');
    }

    // V√©rifier la table module_access_logs
    const { data: logsData, error: logsError } = await supabase
      .from('module_access_logs')
      .select('*')
      .limit(1);
    
    if (logsError) {
      console.error('‚ùå Erreur table module_access_logs:', logsError);
      console.log('üí° Ex√©cutez le script create-module-access-logs.sql pour cr√©er cette table');
    } else {
      console.log('‚úÖ Table module_access_logs accessible');
    }

    console.log('');

    // 3. Test de l'API de g√©n√©ration de tokens
    console.log('3Ô∏è‚É£ Test de l\'API de g√©n√©ration de tokens...');
    
    // Cr√©er un utilisateur de test si n√©cessaire
    const testEmail = 'test-auth@example.com';
    const testPassword = 'testpassword123';
    
    console.log(`üìß Tentative de connexion avec: ${testEmail}`);
    
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });

    if (signInError) {
      console.log('‚ö†Ô∏è Utilisateur de test non trouv√©, cr√©ation...');
      
      const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
        email: testEmail,
        password: testPassword
      });

      if (signUpError) {
        console.error('‚ùå Erreur cr√©ation utilisateur de test:', signUpError);
        return;
      }

      console.log('‚úÖ Utilisateur de test cr√©√©');
    } else {
      console.log('‚úÖ Connexion utilisateur de test r√©ussie');
    }

    // R√©cup√©rer l'utilisateur actuel
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      console.error('‚ùå Aucun utilisateur connect√©');
      return;
    }

    console.log(`üë§ Utilisateur connect√©: ${user.email} (ID: ${user.id})\n`);

    // 4. Test de cr√©ation d'abonnement de test
    console.log('4Ô∏è‚É£ Test de cr√©ation d\'abonnement de test...');
    
    const testSubscription = {
      user_id: user.id,
      module_name: 'stablediffusion',
      status: 'active',
      start_date: new Date().toISOString(),
      end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 jours
    };

    const { data: subscriptionData, error: subscriptionInsertError } = await supabase
      .from('user_subscriptions')
      .insert([testSubscription])
      .select();

    if (subscriptionInsertError) {
      console.error('‚ùå Erreur cr√©ation abonnement de test:', subscriptionInsertError);
    } else {
      console.log('‚úÖ Abonnement de test cr√©√©');
    }

    console.log('');

    // 5. Test de l'API de g√©n√©ration de token
    console.log('5Ô∏è‚É£ Test de l\'API de g√©n√©ration de token...');
    
    const response = await fetch('http://localhost:8021/api/generate-module-access', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        moduleName: 'stablediffusion',
        userId: user.id,
        duration: 24
      }),
    });

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Token g√©n√©r√© avec succ√®s');
      console.log(`üîë Token: ${data.accessToken.substring(0, 50)}...`);
      console.log(`‚è∞ Expire dans: ${data.expiresIn} heures`);
    } else {
      const errorData = await response.json();
      console.error('‚ùå Erreur g√©n√©ration token:', errorData);
    }

    console.log('');

    // 6. Test de validation de token
    console.log('6Ô∏è‚É£ Test de validation de token...');
    
    if (response.ok) {
      const tokenData = await response.json();
      
      const validateResponse = await fetch('http://localhost:8021/api/validate-magic-link', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          token: tokenData.accessToken
        }),
      });

      if (validateResponse.ok) {
        const validateData = await validateResponse.json();
        console.log('‚úÖ Token valid√© avec succ√®s');
        console.log(`üë§ Utilisateur: ${validateData.magicLinkData.userId}`);
        console.log(`üì¶ Module: ${validateData.magicLinkData.moduleName}`);
      } else {
        const validateError = await validateResponse.json();
        console.error('‚ùå Erreur validation token:', validateError);
      }
    }

    console.log('');

    // 7. Test de v√©rification d'abonnement
    console.log('7Ô∏è‚É£ Test de v√©rification d\'abonnement...');
    
    const checkResponse = await fetch(`http://localhost:8021/api/check-subscription?module=stablediffusion&userId=${user.id}`);
    
    if (checkResponse.ok) {
      const checkData = await checkResponse.json();
      console.log('‚úÖ V√©rification d\'abonnement r√©ussie');
      console.log(`üì¶ Abonnement actif: ${checkData.hasActiveSubscription}`);
      if (checkData.subscription) {
        console.log(`üìÖ Expire le: ${new Date(checkData.subscription.end_date).toLocaleDateString()}`);
      }
    } else {
      const checkError = await checkResponse.json();
      console.error('‚ùå Erreur v√©rification abonnement:', checkError);
    }

    console.log('');

    // 8. Nettoyage
    console.log('8Ô∏è‚É£ Nettoyage des donn√©es de test...');
    
    // Supprimer l'abonnement de test
    if (subscriptionData) {
      const { error: deleteError } = await supabase
        .from('user_subscriptions')
        .delete()
        .eq('id', subscriptionData[0].id);
      
      if (deleteError) {
        console.error('‚ùå Erreur suppression abonnement de test:', deleteError);
      } else {
        console.log('‚úÖ Abonnement de test supprim√©');
      }
    }

    // D√©connexion
    const { error: signOutError } = await supabase.auth.signOut();
    if (signOutError) {
      console.error('‚ùå Erreur d√©connexion:', signOutError);
    } else {
      console.log('‚úÖ D√©connexion r√©ussie');
    }

    console.log('\nüéâ Tests termin√©s avec succ√®s !');
    console.log('\nüìã R√©sum√©:');
    console.log('‚úÖ Connexion √† Supabase');
    console.log('‚úÖ Structure des tables');
    console.log('‚úÖ Authentification utilisateur');
    console.log('‚úÖ Gestion des abonnements');
    console.log('‚úÖ G√©n√©ration de tokens');
    console.log('‚úÖ Validation de tokens');
    console.log('‚úÖ V√©rification d\'abonnements');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter les tests
testAuthenticationSystem(); 