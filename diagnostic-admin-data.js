const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (utiliser les valeurs de env.example)
const supabaseUrl = 'https://xemtoyzcihmncbrlsmhr.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhlbXRveXpjaWhtbmNicmxzbWhyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0MDUzMDUsImV4cCI6MjA2NTk4MTMwNX0.afcRGhlB5Jj-7kgCV6IzUDRdGUQkHkm1Fdl1kzDdj6M';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function diagnosticAdminData() {
  console.log('üîç Diagnostic des donn√©es d\'administration');
  console.log('==========================================');
  console.log('');

  try {
    // 1. V√©rifier la connexion Supabase
    console.log('1Ô∏è‚É£ Test de connexion Supabase...');
    const { data: testData, error: testError } = await supabase
      .from('cartes')
      .select('count')
      .limit(1);
    
    if (testError) {
      console.error('‚ùå Erreur de connexion:', testError);
      return;
    }
    console.log('‚úÖ Connexion Supabase OK');
    console.log('');

    // 2. V√©rifier les cartes
    console.log('2Ô∏è‚É£ V√©rification des cartes...');
    const { data: cards, error: cardsError } = await supabase
      .from('cartes')
      .select('*')
      .order('created_at', { ascending: false });

    if (cardsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des cartes:', cardsError);
    } else {
      console.log(`‚úÖ ${cards.length} cartes trouv√©es`);
      if (cards.length > 0) {
        console.log('üìã Cartes disponibles:');
        cards.forEach((card, index) => {
          console.log(`   ${index + 1}. ${card.title} (${card.category}) - ‚Ç¨${card.price}`);
        });
      }
    }
    console.log('');

    // 3. V√©rifier les articles de blog
    console.log('3Ô∏è‚É£ V√©rification des articles de blog...');
    const { data: articles, error: articlesError } = await supabase
      .from('blog_articles')
      .select('*')
      .order('created_at', { ascending: false });

    if (articlesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des articles:', articlesError);
    } else {
      console.log(`‚úÖ ${articles.length} articles trouv√©s`);
      if (articles.length > 0) {
        console.log('üìã Articles disponibles:');
        articles.forEach((article, index) => {
          console.log(`   ${index + 1}. ${article.title} (${article.category})`);
        });
      }
    }
    console.log('');

    // 4. V√©rifier les utilisateurs/profiles
    console.log('4Ô∏è‚É£ V√©rification des utilisateurs...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*');

    if (profilesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des profils:', profilesError);
    } else {
      console.log(`‚úÖ ${profiles.length} profils trouv√©s`);
      if (profiles.length > 0) {
        console.log('üìã Utilisateurs disponibles:');
        profiles.forEach((profile, index) => {
          console.log(`   ${index + 1}. ${profile.email || 'Email non disponible'} (${profile.role})`);
        });
      }
    }
    console.log('');

    // 5. V√©rifier la table detail_pages
    console.log('5Ô∏è‚É£ V√©rification de la table detail_pages...');
    const { data: detailPages, error: detailPagesError } = await supabase
      .from('detail_pages')
      .select(`
        *,
        card:cartes(title)
      `)
      .order('created_at', { ascending: false });

    if (detailPagesError) {
      if (detailPagesError.code === '42P01') {
        console.log('‚ùå La table detail_pages n\'existe pas encore');
        console.log('üí° Pour la cr√©er, ex√©cutez le contenu de create-detail-pages-table.sql dans Supabase SQL Editor');
      } else {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des pages d√©taill√©es:', detailPagesError);
      }
    } else {
      console.log(`‚úÖ ${detailPages.length} pages d√©taill√©es trouv√©es`);
      if (detailPages.length > 0) {
        console.log('üìã Pages d√©taill√©es disponibles:');
        detailPages.forEach((page, index) => {
          console.log(`   ${index + 1}. ${page.title} (li√©e √†: ${page.card?.title || 'Carte non trouv√©e'})`);
        });
      }
    }
    console.log('');

    // 6. R√©sum√©
    console.log('üìä R√©sum√© des donn√©es:');
    console.log(`   - Cartes: ${cards?.length || 0}`);
    console.log(`   - Articles: ${articles?.length || 0}`);
    console.log(`   - Utilisateurs: ${profiles?.length || 0}`);
    console.log(`   - Pages d√©taill√©es: ${detailPages?.length || 0}`);
    console.log('');

    // 7. Recommandations
    console.log('üí° Recommandations:');
    if (!cards || cards.length === 0) {
      console.log('   - Aucune carte trouv√©e. Cr√©ez des cartes via l\'interface d\'administration.');
    }
    if (!articles || articles.length === 0) {
      console.log('   - Aucun article trouv√©. Cr√©ez des articles via l\'interface d\'administration.');
    }
    if (!profiles || profiles.length === 0) {
      console.log('   - Aucun utilisateur trouv√©. Cr√©ez des comptes utilisateurs.');
    }
    if (detailPagesError && detailPagesError.code === '42P01') {
      console.log('   - Table detail_pages manquante. Ex√©cutez le SQL de cr√©ation.');
    }

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  }
}

// Ex√©cuter le diagnostic
diagnosticAdminData(); 